#!/bin/bash -efu
# vim:set foldmethod=marker:

OCDEV_VARDIR=${OCDEV_VARDIR:=$HOME/.ocdev}

PROGNAME=$(basename "$0")

usage() {
    echo "usage: $PROGNAME <command>"
    echo
    echo "Available commands:"
    echo "  show-toplevel    Show the absolute path of the top-level directory"
    echo "  show-bindir      Show the absolute path of the directory with OpenShift binaries"
    echo "  env              Show adjusted environment variables"
    echo "  oc               Run oc from the current source tree"
    echo "  ocdefault        Run oc command as the system:admin user in the default namespace"
    echo "  build-all        Build openshift, oc, and dockerregistry"
    echo "  build-pod-image  Build openshift/origin-pod:latest Docker image"
    echo "  create-defaults  Create the user 'developer' and the project 'myproject'"
    echo "  destroy          Remove generated config files, etcd data, volumes, etc"
    echo
    echo "OpenShift:"
    echo "  build            Build openshift and oc binaries"
    echo "  start            Start the all-in-one OpenShift server in the foreground"
    echo
    echo "Commands for the registry:"
    echo "  build-registry-image  Build the ocdev-registry:latest Docker image"
    echo "  build-registry        Build the dockerregistry binary"
    echo "  start-registry        Create Service and DeploymentConfig for the registry"
    echo "  rollout-registry      Redeploy the registry"
    echo "  update-registry       Rebuild and redeploy the registry"
    echo
    echo "Usage examples:"
    echo "  ocdev build-all"
    echo "  ocdev start --loglevel=4"
    echo "  ocdev start-registry"
    echo
    echo "  ocdev update-registry"
}

fatal() {
    printf "%s: %s\n" "$PROGNAME" "$*" >&2
    exit 1
}

cd_toplevel() {
    local toplevel err
    toplevel=$(git rev-parse --show-toplevel) || err=$?
    if [ "$err" -ne 0 ]; then
        echo
        echo "You are expected to run $PROGNAME from OpenShift's git repository."
        exit "$err"
    fi
    cd "$toplevel"
}

add_bindir_to_path() {
    export OCDEV_BINDIR="$PWD/_output/local/bin/$(go env GOHOSTOS)/$(go env GOHOSTARCH)"

    local oc=$(which oc 2>/dev/null)
    if [ "$oc" != "$OCDEV_BINDIR/oc" ]; then
        PATH="$OCDEV_BINDIR:$PATH"
    fi
}

ocdefault() {
    oc --context=$(kubectl config current-context | sed -e 's,^[^/]*,default,' -e 's,[^/]*$,system:admin,') "$@"
}

# {{{ ocdevhelper

ocdevhelper-commands() {
    declare -F | sed -ne 's/^declare -f ocdev\(helper\)\?-\(.*\)$/\2/p'
}

ocdevhelper-bash-completion() {
    cat <<'END'
_ocdev()
{
  local commands=$(ocdev commands)

  local cur prev
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  COMPREPLY=( $(compgen -W "${commands}" -- ${cur}) )

  return 0
}
complete -o nospace -F _ocdev ocdev
END
}

# }}}

# {{{ ocdev

ocdev-show-toplevel() {
    pwd
}

ocdev-show-bindir() {
    echo "$OCDEV_BINDIR"
}

ocdev-env() {
    printf "export PATH=%q\n" "$PATH"
}

ocdev-oc() {
    oc "$@"
}

ocdev-ocdefault() {
    ocdefault "$@"
}

ocdev-build-all() {
    ocdev-build
    ocdev-build-pod-image
    ocdev-build-registry
}

ocdev-build-pod-image() {
    ./hack/build-go.sh images/pod

    local tmp
    tmp=$(mktemp -d "${TMPDIR:-/tmp}"/ocdev-pod.XXXXXXXX)
    cp "$OCDEV_BINDIR/pod" "$tmp/pod"
    printf >"$tmp/Dockerfile" "%s\n" \
        'FROM scratch' \
        'COPY pod /pod' \
        'USER 1001' \
        'ENTRYPOINT ["/pod"]'
    docker build -t openshift/origin-pod:latest "$tmp"
    rm -rf "$tmp"
}

ocdev-create-defaults() {
    oc login -u developer -p developer
    oc new-project myproject
}

ocdev-destroy() {
    mount | grep -F "$OCDEV_VARDIR/openshift.local.volumes" | cut -d' ' -f3 | xargs -r sudo umount
    sudo rm -rf "$OCDEV_VARDIR"
}

# }}}

# {{{ openshift

ocdev-build() {
    ./hack/build-go.sh cmd/openshift cmd/oc
}

ocdev-start() {
    local openshift
    if ! openshift=$(which openshift); then
        fatal "start: failed to find openshift binary"
    fi

    local configdir="$OCDEV_VARDIR/openshift.local.config"
    local etcddir="$OCDEV_VARDIR/openshift.local.etcd"
    local volumedir="$OCDEV_VARDIR/openshift.local.volumes"

    "$openshift" start --write-config="$configdir" \
        --images='openshift/origin-${component}:latest' \
        --etcd-dir="$etcddir" \
        --volume-dir="$volumedir"
    sudo chmod +r "$configdir/master/admin.kubeconfig"
    cp "$configdir/master/admin.kubeconfig" "$HOME/.kube/config"

    sudo "$openshift" start \
        --master-config="$configdir/master/master-config.yaml" \
        --node-config="$configdir/node-localhost/node-config.yaml" \
        "$@"
}

# }}}

# {{{ router

ocdev-start-router() {
    ocdefault adm policy add-scc-to-user hostnetwork -z router
    ocdefault adm router
}

# }}}

# {{{ registry

ocdev-build-registry-image() {
    docker build -t ocdev-registry - <<'END'
FROM fedora
USER 1001
EXPOSE 5000
ENV REGISTRY_CONFIGURATION_PATH=/openshift/images/dockerregistry/config.yml
VOLUME /registry
VOLUME /openshift/bin
CMD DOCKER_REGISTRY_URL=${DOCKER_REGISTRY_SERVICE_HOST}:${DOCKER_REGISTRY_SERVICE_PORT} /openshift/bin/dockerregistry
END
}

ocdev-build-registry() {
    ./hack/build-go.sh cmd/dockerregistry
    ocdev-build-registry-image
}

ocdev-start-registry() {
    local bindir="$OCDEV_BINDIR" imagesdir="$PWD/images"
    ocdefault adm registry -o json |
        jq --arg bindir "$bindir" --arg imagesdir "$imagesdir" '
            path(.items[] | select(.kind == "Service" and .metadata.name == "docker-registry")) as $svc |
            setpath($svc + ["spec", "clusterIP"]; "172.30.1.1") |

            path(.items[] | select(.kind == "DeploymentConfig" and .metadata.name == "docker-registry")) as $dc |
            ($dc + ["spec", "template", "spec", "volumes"]) as $volumes |
            setpath($volumes; getpath($volumes) + [{
                "name": "openshift-bin",
                "hostPath": {
                    "path": $bindir
                }
            }, {
                "name": "openshift-images",
                "hostPath": {
                    "path": $imagesdir
                }
            }]) |

            path(.items[] | select(.kind == "DeploymentConfig" and .metadata.name == "docker-registry") | .spec.template.spec.containers[] | select(.name == "registry")) as $container |
            setpath($container + ["image"]; "ocdev-registry:latest") |
            setpath($container + ["imagePullPolicy"]; "Never") |
            setpath($container + ["volumeMounts"]; getpath($container + ["volumeMounts"]) + [{
                "name": "openshift-bin",
                "mountPath": "/openshift/bin"
            }, {
                "name": "openshift-images",
                "mountPath": "/openshift/images"
            }])
        ' |
        ocdefault create -f -
    ocdefault adm policy add-scc-to-user hostaccess -z registry
}

ocdev-rollout-registry() {
    ocdefault rollout latest dc/docker-registry || true
    ocdefault rollout status dc/docker-registry
}

ocdev-logs-registry() {
    ocdefault logs dc/docker-registry "$@"
}

ocdev-update-registry() {
    ocdev-build-registry
    ocdev-rollout-registry
}

ocdev-registry-enabled-metrics() {
    ocdefault patch dc docker-registry -p '{"spec": {"template":
      {"spec": {"containers": [{
        "name": "registry",
        "env": [
          {"name": "REGISTRY_OPENSHIFT_METRICS_ENABLED", "value": "true"},
          {"name": "REGISTRY_OPENSHIFT_METRICS_SECRET", "value": "mysecret"}
        ]
      }]}}
    }}'
    ocdefault rollout status dc/docker-registry
}

ocdev-registry-expose-secured() {
    local master="$OCDEV_VARDIR/openshift.local.config/master"
    oadm ca create-server-cert \
        --signer-cert="$master/ca.crt" \
        --signer-key="$master/ca.key" \
        --signer-serial="$master/ca.serial.txt" \
        --hostnames='registry.127.0.0.1.nip.io,docker-registry.default.svc.cluster.local,172.30.1.1' \
        --cert="$OCDEV_VARDIR/registry-secrets/registry.crt" \
        --key="$OCDEV_VARDIR/registry-secrets/registry.key"
    ocdefault secrets new registry-secret \
        "$OCDEV_VARDIR/registry-secrets/registry.crt" \
        "$OCDEV_VARDIR/registry-secrets/registry.key" || true
    ocdefault secrets link registry registry-secret
    ocdefault secrets link default  registry-secret
    ocdefault volume dc/docker-registry --add --type=secret \
        --secret-name=registry-secret -m /etc/secrets || true
    ocdefault set env dc/docker-registry \
        REGISTRY_HTTP_TLS_CERTIFICATE=/etc/secrets/registry.crt \
        REGISTRY_HTTP_TLS_KEY=/etc/secrets/registry.key
    ocdefault patch dc/docker-registry -p '{"spec": {"template":
      {"spec": {"containers":[{
        "name":"registry",
        "livenessProbe":  {"httpGet": {"scheme":"HTTPS"}},
        "readinessProbe": {"httpGet": {"scheme":"HTTPS"}}
      }]}}
    }}'
    ocdefault create route passthrough --service=docker-registry --hostname=registry.127.0.0.1.nip.io || true
    sudo mkdir -p /etc/docker/certs.d/registry.127.0.0.1.nip.io
    sudo cp "$master/ca.crt" /etc/docker/certs.d/registry.127.0.0.1.nip.io/ca.crt
    ocdefault rollout status dc/docker-registry
    ocdefault rollout status dc/router
    echo
    echo 'Done. You can check it using the command:'
    echo
    echo '  curl -v -k https://registry.127.0.0.1.nip.io/v2/'
    echo
}

ocdev-registry-anonymous() {
    ocdefault adm policy add-cluster-role-to-user registry-viewer system:anonymous
}

ocdev-registry-anonymous-myproject() {
    oc policy add-role-to-user registry-viewer system:anonymous -n myproject
}

ocdev-registry-generate-garbage() {
    docker login -u $(oc whoami) -p $(oc whoami -t) 172.30.1.1:5000

    oc import-image fedora --from=fedora --confirm
    oc import-image ubuntu --from=ubuntu --confirm
    oc delete is/ubuntu

    docker pull busybox
    docker pull busybox:glibc
    docker tag busybox 172.30.1.1:5000/myproject/busybox
    docker push 172.30.1.1:5000/myproject/busybox
    docker tag busybox:glibc 172.30.1.1:5000/myproject/busybox-glibc
    docker push 172.30.1.1:5000/myproject/busybox-glibc
    oc delete is/busybox-glibc
}

# }}}

[ $# -ge 1 ] || { usage >&2; exit 1; }

if declare -f "ocdevhelper-$1" >/dev/null; then
    "ocdevhelper-$@"
    exit $?
fi

cd_toplevel
add_bindir_to_path

if declare -f "ocdev-$1" >/dev/null || test -x "ocdev-$1"; then
    "ocdev-$@"
else
    usage >&2
    exit 1
fi

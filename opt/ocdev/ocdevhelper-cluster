#!/bin/bash -efu

usage() {
    echo "usage: $OCDEV_PROGNAME <command>"
    echo
    echo "Available commands:"
    echo "  show-toplevel       Show the absolute path of the top-level directory"
    echo "  show-bindir         Show the absolute path of the directory with OpenShift binaries"
    echo "  env                 Show adjusted environment variables"
    echo "  oc                  Run oc from the current source tree"
    echo "  ocdefault           Run oc command as the system:admin user in the default namespace"
    echo "  oadm                Run openshift admin as the system:admin user"
    echo "  exec                Run a program from the directory with OpenShift binaries"
    echo "  build-all           Build openshift, oc, and dockerregistry"
    echo "  login-as-developer  Login as the developer user"
    echo "  destroy             Remove generated config files, etcd data, volumes, etc"
    echo "  registry            Manage the integrated Docker registry"
    echo
    echo "OpenShift:"
    echo "  build               Build openshift and oc binaries"
    echo "  start               Start the all-in-one OpenShift server in the foreground"
    echo "  create-defaults     Create the user 'developer', the project 'myproject', and default imagestreams"
}

ocdevcluster-build-image() {
    ocdev-build-openshift
    ocdev pod build-image
    ocdev-build-registry
}

ocdev-create-defaults() {
    oc login -u developer -p developer
    oc new-project myproject
    ocdefault -n openshift create -f ./examples/image-streams/image-streams-centos7.json
}

ocdev-login-as-developer() {
    oc login -u developer
}

ocdev-destroy() {
    mount | grep -F "$OCDEV_VARDIR/openshift.local.volumes" | cut -d' ' -f3 | xargs -r sudo umount
    sudo rm -rf "$OCDEV_VARDIR"
}

ocdev-login-as-pruner() {
    oc login -u pruner -p pruner
    oadm policy add-cluster-role-to-user system:image-pruner pruner
}

# {{{ prometheus

ocdev-prometheus-generate-config() {
    cat <<END
global:
  scrape_interval:     5s
  evaluation_interval: 5s

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  - job_name: 'cadvisor'
    static_configs:
      - targets: ['cadvisor:8080']

  - job_name: 'docker-registry'
    metrics_path: /extensions/v2/metrics
    bearer_token: mysecret
    static_configs:
      - targets: ['172.30.1.1:5000']
}
END
}

ocdev-prometheus-deploy() {
    [ $# -ge 1 ] || {
        echo "usage: $OCDEV_PROGNAME: prometheus-deploy <prometheus.yml>" >&2
        exit 1
    }

    oc new-app google/cadvisor
    oc new-app prom/prometheus

    oc expose service cadvisor --hostname='cadvisor.127.0.0.1.nip.io'
    oc expose service prometheus --hostname='prometheus.127.0.0.1.nip.io'

    oc create configmap prom-config --from-file="$1"

    oc patch dc/prometheus -p '{"spec": {"template": {"spec": {
      "volumes": [{
        "name": "prom-config-volume",
        "configMap": {
          "name": "prom-config",
          "defaultMode": 420
        }
      }],
      "containers":[{
        "name": "prometheus",
        "volumeMounts": [{
          "name": "prom-config-volume",
          "mountPath": "/etc/prometheus/"
        }]
      }]
    } } } }'

    oc rollout status dc/prometheus
}

# }}}

ocdevutil-main "ocdevhelper-" "ocdev-" "$@"
